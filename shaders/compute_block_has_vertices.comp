#version 450 core

#include "compute_vertex_values.comp"

// Each thread group processes a single block, with each thread processing
// a voxel to isosurface
layout(local_size_x = BLOCK_NUM_VOXELS, local_size_y = 1, local_size_z = 1) in;

// Separate buffer to track if the block has vertices to output for simpler
// path to trim out active blocks which won't output vertices
// (e.g., ghost blocks needed just for neighbor data)
layout(set = 1, binding = 0, std430) buffer BlockHasVertices
{
    uint block_has_vertices[];
};

layout(set = 1, binding = 1, std140) uniform BlockIDOffset
{
    uint block_id_offset;
};

void main(void)
{
    const uint work_item = gl_WorkGroupID.x + block_id_offset;
    const uint block_id = block_ids[work_item];
    const uvec3 block_dims = load_block(block_id);

    const uvec3 voxel_pos = voxel_id_to_voxel(gl_LocalInvocationID.x);
    uint nverts = 0;
    if (all(lessThan(voxel_pos + uvec3(1), block_dims))) {
        const float values[8] = compute_vertex_values(voxel_pos, block_dims);
        uint case_index = 0;
        for (int i = 0; i < 8; ++i) {
            if (values[i] <= isovalue) {
                case_index |= 1 << i;
            }
        }

        // The triangle table gives us the mapping from index to actual
        // triangles to return for this configuration
        uint chunk = case_index * 4;
        ivec4 table_chunk = tri_table[chunk];
        for (uint t = 0; table_chunk[t] != -1;) {
            ++nverts;
            if (t == 3) {
                table_chunk = tri_table[++chunk];
                t = 0;
            } else {
                ++t;
            }
        }
    }
    voxel_vertices[gl_LocalInvocationID.x] = nverts;
    barrier();

    // Check if any voxel in the block will output vertices
    if (gl_LocalInvocationID.x == 0) {
        block_has_vertices[work_item] = 0;
        for (int i = 0; i < BLOCK_NUM_VOXELS; ++i) {
            if (voxel_vertices[i] > 0) {
                block_has_vertices[work_item] = 1;
                break;
            }
        }
    }
}

