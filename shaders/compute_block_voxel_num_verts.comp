#version 450 core

#include "compute_vertex_values.comp"

// Each thread group processes a single block, with each thread processing
// a voxel to isosurface. Each ZFP block is 4^3, so we have a 3^3 dual grid
// to compute marching cubes on
layout(local_size_x = BLOCK_NUM_VOXELS, local_size_y = 1, local_size_z = 1) in;

layout(set = 1, binding = 0, std430) buffer BlockOffsets
{
    uint block_offsets[];
};

layout(set = 1, binding = 1, std430) buffer BlockWithVertsIndices
{
    uint block_with_verts_indices[];
};

layout(set = 2, binding = 0, std140) uniform BlockIndexOffset
{
    uint block_index_offset;
};

void main(void)
{
    const uint block_id = block_ids[block_with_verts_indices[gl_WorkGroupID.x + block_index_offset]];
    const uvec3 block_dims = load_block(block_id);

    const uvec3 voxel_pos = voxel_id_to_voxel(gl_LocalInvocationID.x);
    uint nverts = 0;
    if (all(lessThan(voxel_pos + uvec3(1), block_dims))) {
        const float values[8] = compute_vertex_values(voxel_pos, block_dims);
        uint case_index = 0;
        for (int i = 0; i < 8; ++i) {
            if (values[i] <= isovalue) {
                case_index |= 1 << i;
            }
        }

        // The triangle table gives us the mapping from index to actual
        // triangles to return for this configuration
        uint chunk = case_index * 4;
        ivec4 table_chunk = tri_table[chunk];
        for (uint t = 0; table_chunk[t] != -1;) {
            ++nverts;
            if (t == 3) {
                table_chunk = tri_table[++chunk];
                t = 0;
            } else {
                ++t;
            }
        }
    }
    voxel_vertices[gl_LocalInvocationID.x] = nverts;

    // Perform a prefix sum (exclusive scan) on the vertex counts to compute the block-local
    // vertex offsets where each voxel should write its values, relative to the block's offset
    uint offs = 1;
    // Reduce step up tree
    for (int d = BLOCK_NUM_VOXELS >> 1; d > 0; d = d >> 1) {
        barrier();
        if (gl_LocalInvocationID.x < d) {
            uint a = offs * (2 * gl_LocalInvocationID.x + 1) - 1;
            uint b = offs * (2 * gl_LocalInvocationID.x + 2) - 1;
            voxel_vertices[b] += voxel_vertices[a];
        }
        offs = offs << 1;
    }

    // We just need to do the up sweep to compute the total number of vertices
    // which will be output by this block
    if (gl_LocalInvocationID.x == 0) {
        uint block_verts = voxel_vertices[BLOCK_NUM_VOXELS - 1];
        block_offsets[gl_WorkGroupID.x + block_index_offset] = block_verts;
    }
}

