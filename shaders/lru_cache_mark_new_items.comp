#version 450 core

#include "lru_cache_inputs.comp"

// TODO: can use a larger thread group size
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 1, binding = 0, std430) readonly buffer ItemNeeded
{
    // Input of active elements from the marching cubes active block determination pass
    uint item_needed[];
};

layout(set = 1, binding = 1, std430) buffer ItemNeedsCaching
{
    // 1/0 which new items need to be added to the cache
    uint item_needs_caching[];
};

void main(void)
{
    const int slot = cached_item_slot[gl_GlobalInvocationID.x];
    if (slot >= 0) {
        item_needs_caching[gl_GlobalInvocationID.x] = 0;
        if (item_needed[gl_GlobalInvocationID.x] == 1) {
            // Item is already cached, reset age and unset slot availability
            slot_age[slot] = 0;
            slot_available[slot] = 0;
        } else {
            slot_available[slot] = 1;
        }
    } else {
        // Item is not cached, just pass through whether we need the item or not
        // to tell us if we need to cache it
        item_needs_caching[gl_GlobalInvocationID.x] = item_needed[gl_GlobalInvocationID.x];
    }
}

