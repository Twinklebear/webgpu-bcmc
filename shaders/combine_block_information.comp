#version 450 core

#include "util.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) buffer BlockInformation
{
    BlockInfo blocks[];
};

layout(set = 0, binding = 1, std430) buffer BlockIDs
{
    uint block_ids[];
};

layout(set = 0, binding = 2, std430) buffer BlockRayOffset
{
    uint block_ray_offsets[];
};

layout(set = 0, binding = 3, std430) buffer BlockNumRays
{
    uint block_num_rays[];
};

layout(set = 0, binding = 4, std430) buffer BlockActive
{
    uint block_active[];
};

void main(void)
{
    // Combine the buffers to fit in fewer storage buffers until limits are removed
    // Note that 8 will be supported soon in Chromium so we could remove this
    // This data is compacted down as it's run on the compacted block ids
    const uint id = block_ids[gl_GlobalInvocationID.x];
    blocks[gl_GlobalInvocationID.x].id = id;
    blocks[gl_GlobalInvocationID.x].ray_offset = block_ray_offsets[id];
    blocks[gl_GlobalInvocationID.x].num_rays = block_num_rays[id];
    // If the block is running in this pipeline it must be visible,
    // so if it's not active, then it's an LOD block
    blocks[gl_GlobalInvocationID.x].lod = block_active[id] == 0 ? 1 : 0;
}

