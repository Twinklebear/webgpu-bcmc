#version 450 core

#include "util.glsl"
#include "load_block.comp"

layout(local_size_x = BLOCK_NUM_VOXELS, local_size_y = 1, local_size_z = 1) in;

layout(set = 1, binding = 0, std140) uniform ViewParams
{
    mat4 proj_view;
    vec4 eye_pos;
};

layout(set = 1, binding = 1, std430) buffer RayInformation
{
    RayInfo rays[];
};

layout(set = 1, binding = 2, std430) buffer RayIDs
{
    uint ray_ids[];
};

layout(set = 1, binding = 3, std430) buffer BlockInformation
{
    BlockInfo blocks[];
};

uniform layout(set = 1, binding = 4, rgba8) writeonly image2D render_target;

shared BlockInfo block_info;

void main(void)
{
    if (gl_LocalInvocationID.x == 0) {
        block_info = blocks[gl_WorkGroupID.x];
    }
    barrier();
    if (block_info.num_rays == 0) { 
        return;
    }
    const uvec3 block_dims = load_block(block_info.id);
    // Block position in voxels
    const uvec3 block_pos = block_id_to_pos(block_info.id) * 4;

    vec3 volume_translation = vec3(0) - volume_scale.xyz * 0.5;
    vec3 transformed_eye = (eye_pos.xyz - volume_translation) / volume_scale.xyz;
    vec3 vol_eye = transformed_eye * volume_dims.xyz - vec3(0.5);

    // Process all the rays for this block in parallel, each thread takes one ray
    // so we can do 64 rays at a time. For cases where a block projects to a lot more
    // than 64 pixels it'd be good to break up the rays to be processed by multiple
    // work groups to avoid serializing rendering. However that might not be a common case
    // for most large volumes. For the last chunk, threads that don't have a ray to
    // process just write an invalid texture coordinate, which results in the write
    // being discarded. However, they have to call imageStore collectively, as it's a
    // sync point
    uint chunks = (block_info.num_rays / gl_WorkGroupSize.x);
    if (block_info.num_rays % gl_WorkGroupSize.x != 0) {
        ++chunks;
    }

    for (uint i = 0; i < chunks; ++i) {
        ivec2 pixel_coords = ivec2(-1);
        vec4 color = vec4(0);
        color.a = 1;
        uint ray_id = i * gl_WorkGroupSize.x + gl_LocalInvocationID.x;

        if (ray_id < block_info.num_rays) {
            const uint ray_index = ray_ids[block_info.ray_offset + ray_id];
            pixel_coords = ivec2(ray_id_to_pos(ray_index));

            vec3 grid_ray_dir = rays[ray_index].ray_dir;

            float t_current = rays[ray_index].t;
            vec3 p = (vol_eye + t_current * grid_ray_dir);
            p = clamp(p, block_pos, vec3(block_pos + block_dims - 2));

            const vec3 inv_grid_ray_dir = 1.0 / grid_ray_dir;
            vec3 cell = floor(p);
            const vec3 t_max_neg = (cell - vol_eye) * inv_grid_ray_dir;
            const vec3 t_max_pos = (cell + vec3(1) - vol_eye) * inv_grid_ray_dir;
            const bvec3 is_neg_dir = lessThan(grid_ray_dir, vec3(0));
            // Pick between positive/negative t_max based on the ray sign
            vec3 t_max = mix(t_max_pos, t_max_neg, is_neg_dir);
            const ivec3 grid_step = ivec3(sign(grid_ray_dir));
            // Note: each voxel is a 1^3 box on the grid
            const vec3 t_delta = abs(inv_grid_ray_dir);

            // Traverse the ray through the dual grid 
            float vertex_values[8];
            vec2 cell_range;
            bool hit_surface = false;
            while (!outside_dual_grid(cell - block_pos, vec3(block_dims))) {
                const ivec3 v000 = ivec3(cell - block_pos);
                compute_vertex_values(v000, block_dims, vertex_values, cell_range);

                const float t_next = min(t_max.x, min(t_max.y, t_max.z));
                const bool skip_cell = isovalue < cell_range.x || isovalue > cell_range.y;

                // TODO: intersect isosurface, right now for initial testing just mark the cell
                if (!skip_cell) {
                    hit_surface = true;
                    color = vec4(1);
                    // This ray has terminated
                    rays[ray_index].block_id = UINT_MAX;
                    rays[ray_index].t_next = FLT_MAX;
                    rays[ray_index].t = FLT_MAX;
                    break;
                }

                t_current = t_next;
                // Advance in the grid
                if (t_next == t_max.x) {
                    cell.x += grid_step.x;
                    t_max.x += t_delta.x;
                } else if (t_next == t_max.y) {
                    cell.y += grid_step.y;
                    t_max.y += t_delta.y;
                } else {
                    cell.z += grid_step.z;
                    t_max.z += t_delta.z;
                }
            }
            if (!hit_surface) {
                // Update the ray t value for the next iteration of traversing the macrocell grid
                // TODO: Precision issue here, should rework how the macrocell traversal continues on
                // to not rely on the t value
                rays[ray_index].t = rays[ray_index].t_next + 0.1;
            }
        }
        imageStore(render_target, pixel_coords, color);
    }
}

