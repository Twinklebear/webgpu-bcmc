#version 450 core

#include "util.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform VolumeParams
{
    uvec4 volume_dims;
    uvec4 padded_dims;
    vec4 volume_scale;
    uint max_bits;
    float isovalue;
    uint image_width;
};

layout(set = 0, binding = 1, std430) buffer BlockActive
{
    uint block_active[];
};

layout(set = 0, binding = 2, std430) buffer BlockNumRays
{
    // # of rays per-block, must increment atomicly!
    uint block_num_rays[];
};

layout(set = 0, binding = 3, std430) buffer RayInformation
{
    RayInfo rays[];
};

layout(set = 0, binding = 4, std430) buffer BlockVisible
{
    uint block_visible[];
};

uvec3 block_id_to_pos(uint id)
{
    uvec3 n_blocks = padded_dims.xyz / uvec3(4);
    return uvec3(id % n_blocks.x,
            (id / n_blocks.x) % n_blocks.y,
            id / (n_blocks.x * n_blocks.y));
}

uint compute_block_id(uvec3 block_pos)
{
    uvec3 n_blocks = padded_dims.xyz / uvec3(4);
    return block_pos.x + n_blocks.x * (block_pos.y + n_blocks.y * block_pos.z);
}

void main(void)
{
    uint ray_index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * image_width;
    if (rays[ray_index].t == FLT_MAX) {
        return;
    }

    const uvec3 n_blocks = padded_dims.xyz / uvec3(4);
    const uint block_id = rays[ray_index].block_id;

    // May need to become an atomic or? I don't think it should
    // be an issue but let's see
    block_active[block_id] = 1;

    // Count this ray for the block
    atomicAdd(block_num_rays[block_id], 1);

    const uvec3 block_pos = block_id_to_pos(block_id);

    // Mark this ray's block's neighbors to the positive side as active
    // These blocks must be decompressed for neighbor data, but this ray
    // doesn't need to process them.
    for (int k = 0; k < 2; ++k) {
        for (int j = 0; j < 2; ++j) {
            for (int i = 0; i < 2; ++i) {
                const uvec3 neighbor = uvec3(i, j, k); 
                const uvec3 coords = block_pos + neighbor;
                if (neighbor == uvec3(0) || any(lessThan(coords, uvec3(0)))
                        || any(greaterThanEqual(coords, n_blocks)))
                {
                    continue;
                }
                const uint neighbor_id = compute_block_id(coords);
                // May need to become an atomic or? I don't think it should
                // be an issue but let's see
                block_active[neighbor_id] = 1;
            }
        }
    }
}

