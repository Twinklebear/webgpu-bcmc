#version 450 core

#include "compute_vertex_values.comp"
#include "block_vertex_position.comp"

// Each thread group processes a single block, with each thread processing
// a voxel to isosurface
layout(local_size_x = BLOCK_NUM_VOXELS, local_size_y = 1, local_size_z = 1) in;

const int[12][2] edge_vertices = {
    {0, 1},
    {1, 2},
    {2, 3},
    {3, 0},
    {4, 5},
    {6, 5},
    {6, 7},
    {7, 4},
    {0, 4},
    {1, 5},
    {2, 6},
    {3, 7},
};

layout(set = 1, binding = 0, std430) buffer BlockOffsets
{
    uint block_offsets[];
};

layout(set = 1, binding = 1, std430) buffer BlockWithVertsIndices
{
    uint block_with_verts_indices[];
};

layout(set = 2, binding = 0) uniform DecompressBlockOffset
{
    uint start_block_offset;
};

layout(set = 2, binding = 1, std430) buffer Vertices
{
    uvec2 verts[];
};

vec3 lerp_verts(const ivec3 va, const ivec3 vb, const float fa, const float fb)
{
    float t = 0;
    if (abs(fa - fb) < 0.001) {
        t = 0.0;
    } else {
        t = (isovalue - fa) / (fb - fa);
    }

    return vec3(va[0] + t * (vb[0] - va[0]),
            va[1] + t * (vb[1] - va[1]),
            va[2] + t * (vb[2] - va[2]));
}

void main(void)
{
    const uint block_id = block_ids[block_with_verts_indices[start_block_offset + gl_WorkGroupID.x]];
    const uvec3 block_dims = load_block(block_id);
    const uvec3 voxel_pos = voxel_id_to_voxel(gl_LocalInvocationID.x);

    uint nverts = 0;
    if (all(lessThan(voxel_pos + uvec3(1), block_dims))) {
        const float values[8] = compute_vertex_values(voxel_pos, block_dims);
        uint case_index = 0;
        for (int i = 0; i < 8; ++i) {
            if (values[i] <= isovalue) {
                case_index |= 1 << i;
            }
        }

        // The triangle table gives us the mapping from index to actual
        // triangles to return for this configuration
        uint chunk = case_index * 4;
        ivec4 table_chunk = tri_table[chunk];
        for (uint t = 0; table_chunk[t] != -1;) {
            ++nverts;
            if (t == 3) {
                table_chunk = tri_table[++chunk];
                t = 0;
            } else {
                ++t;
            }
        }
    }
    voxel_vertices[gl_LocalInvocationID.x] = nverts;

    // Perform a prefix sum (exclusive scan) on the vertex counts to compute the block-local
    // vertex offsets where each voxel should write its values, relative to the block's offset
    uint offs = 1;
    // Reduce step up tree
    for (int d = BLOCK_NUM_VOXELS >> 1; d > 0; d = d >> 1) {
        barrier();
        if (gl_LocalInvocationID.x < d) {
            uint a = offs * (2 * gl_LocalInvocationID.x + 1) - 1;
            uint b = offs * (2 * gl_LocalInvocationID.x + 2) - 1;
            voxel_vertices[b] += voxel_vertices[a];
        }
        offs = offs << 1;
    }

    if (gl_LocalInvocationID.x == 0) {
        voxel_vertices[BLOCK_NUM_VOXELS - 1] = 0;
    }

    // Sweep down the tree to finish the scan
    for (int d = 1; d < BLOCK_NUM_VOXELS; d = d << 1) {
        offs = offs >> 1;
        barrier();
        if (gl_LocalInvocationID.x < d) {
            uint a = offs * (2 * gl_LocalInvocationID.x + 1) - 1;
            uint b = offs * (2 * gl_LocalInvocationID.x + 2) - 1;
            const uint tmp = voxel_vertices[a];
            voxel_vertices[a] = voxel_vertices[b];
            voxel_vertices[b] += tmp;
        }
    }
    barrier();

    const uint vertex_offset = block_offsets[start_block_offset + gl_WorkGroupID.x]
        + voxel_vertices[gl_LocalInvocationID.x];
    // Compute and output the vertices
    if (all(lessThan(voxel_pos + uvec3(1), block_dims))) {
        const float values[8] = compute_vertex_values(voxel_pos, block_dims);
        uint case_index = 0;
        for (int i = 0; i < 8; ++i) {
            if (values[i] <= isovalue) {
                case_index |= 1 << i;
            }
        }

        // The triangle table gives us the mapping from index to actual
        // triangles to return for this configuration
        uint cid = 0;
        uint chunk = case_index * 4;
        ivec4 table_chunk = tri_table[chunk];
        for (uint t = 0; table_chunk[t] != -1; ++cid) {
            const uint v0 = edge_vertices[table_chunk[t]][0];
            const uint v1 = edge_vertices[table_chunk[t]][1];

            vec3 v = lerp_verts(index_to_vertex[v0], index_to_vertex[v1], values[v0], values[v1])
                + voxel_pos + vec3(0.5);

            verts[vertex_offset + 4 * (chunk % 4) + t] = uvec2(compress_position(v), block_id);

            if (t == 3) {
                table_chunk = tri_table[++chunk];
                t = 0;
            } else {
                ++t;
            }
        }
    }
}

